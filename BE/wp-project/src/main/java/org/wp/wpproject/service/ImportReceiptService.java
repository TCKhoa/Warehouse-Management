package org.wp.wpproject.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.wp.wpproject.dto.ImportReceiptRequestDTO;
import org.wp.wpproject.dto.ImportReceiptResponseDTO;
import org.wp.wpproject.entity.ImportReceipt;
import org.wp.wpproject.entity.ImportReceiptDetail;
import org.wp.wpproject.entity.Product;
import org.wp.wpproject.entity.User;
import org.wp.wpproject.repository.ImportReceiptRepository;
import org.wp.wpproject.repository.ProductRepository;
import org.wp.wpproject.repository.UserRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class ImportReceiptService {

    @Autowired
    private ImportReceiptRepository importReceiptRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private UserRepository userRepository;

    // ===================== L·∫§Y T·∫§T C·∫¢ (ch∆∞a x√≥a) =====================
    public List<ImportReceiptResponseDTO> getAllActiveImportReceipts() {
        return importReceiptRepository.findByDeletedAtIsNull()
                .stream()
                .map(ImportReceiptResponseDTO::fromEntity)
                .collect(Collectors.toList());
    }

    // ===================== L·∫§Y THEO ID (ch∆∞a x√≥a) =====================
    public Optional<ImportReceiptResponseDTO> getImportReceiptById(String id) {
        return importReceiptRepository.findByIdAndDeletedAtIsNull(id)
                .map(ImportReceiptResponseDTO::fromEntity);
    }

    // ===================== T·∫†O M·ªöI =====================
    @Transactional
    public ImportReceiptResponseDTO createImportReceipt(ImportReceiptRequestDTO request) {
        ImportReceipt importReceipt = new ImportReceipt();

        // üîπ T·ª± sinh ID cho ImportReceipt
        importReceipt.setId(UUID.randomUUID().toString());
        importReceipt.setImportCode(request.getImportCode());
        importReceipt.setNote(request.getNote());
        importReceipt.setCreatedAt(LocalDateTime.now());
        importReceipt.setDeletedAt(null);

        // üîπ G√°n user t·∫°o phi·∫øu
        if (request.getCreatedById() != null) {
            userRepository.findById(request.getCreatedById()).ifPresent(importReceipt::setCreatedBy);
        }

        // üîπ G√°n chi ti·∫øt phi·∫øu nh·∫≠p
        List<ImportReceiptDetail> details = request.getDetails().stream().map(d -> {
            ImportReceiptDetail detail = new ImportReceiptDetail();
            detail.setId(UUID.randomUUID().toString()); // ID chi ti·∫øt

            productRepository.findById(d.getProductId()).ifPresent(product -> {
                detail.setProduct(product);
                detail.setPrice(product.getImportPrice());           // gi√° nh·∫≠p hi·ªán t·∫°i
                detail.setPriceSnapshot(product.getImportPrice());  // snapshot gi√°
                detail.setProductCode(product.getProductCode());    // snapshot m√£ s·∫£n ph·∫©m
                detail.setProductName(product.getName());           // snapshot t√™n s·∫£n ph·∫©m
            });

            detail.setQuantity(d.getQuantity());
            detail.setImportReceipt(importReceipt);
            return detail;
        }).collect(Collectors.toList());
        importReceipt.setDetails(details);

        ImportReceipt saved = importReceiptRepository.save(importReceipt);

        // üîπ C·∫≠p nh·∫≠t t·ªìn kho s·∫£n ph·∫©m (C·ªòNG th√™m s·ªë l∆∞·ª£ng nh·∫≠p)
        for (ImportReceiptDetail detail : saved.getDetails()) {
            Product product = detail.getProduct();
            if (product != null) {
                int newQuantity = product.getStock() + detail.getQuantity();
                product.setStock(newQuantity);
                productRepository.save(product);
            }
        }

        return ImportReceiptResponseDTO.fromEntity(saved);
    }

    // ===================== C·∫¨P NH·∫¨T =====================
    @Transactional
    public Optional<ImportReceiptResponseDTO> updateImportReceipt(String id, ImportReceiptRequestDTO request) {
        Optional<ImportReceipt> importReceiptOpt = importReceiptRepository.findByIdAndDeletedAtIsNull(id);
        if (importReceiptOpt.isEmpty()) {
            return Optional.empty();
        }

        ImportReceipt oldReceipt = importReceiptOpt.get();

        // üîπ Rollback t·ªìn kho c≈© (TR·ª™ ƒëi s·ªë l∆∞·ª£ng ƒë√£ nh·∫≠p tr∆∞·ªõc ƒë√≥)
        if (oldReceipt.getDetails() != null) {
            for (ImportReceiptDetail oldDetail : oldReceipt.getDetails()) {
                Product product = oldDetail.getProduct();
                if (product != null) {
                    int rollbackQuantity = product.getStock() - oldDetail.getQuantity();
                    product.setStock(Math.max(rollbackQuantity, 0));
                    productRepository.save(product);
                }
            }
        }

        // üîπ C·∫≠p nh·∫≠t th√¥ng tin m·ªõi
        oldReceipt.setImportCode(request.getImportCode());
        oldReceipt.setNote(request.getNote());
        oldReceipt.setUpdatedAt(LocalDateTime.now());

        if (request.getCreatedById() != null) {
            userRepository.findById(request.getCreatedById()).ifPresent(oldReceipt::setCreatedBy);
        }

        // üîπ C·∫≠p nh·∫≠t chi ti·∫øt (x√≥a c≈©, th√™m m·ªõi)
        List<ImportReceiptDetail> newDetails = request.getDetails().stream().map(d -> {
            ImportReceiptDetail detail = new ImportReceiptDetail();
            detail.setId(UUID.randomUUID().toString());

            productRepository.findById(d.getProductId()).ifPresent(product -> {
                detail.setProduct(product);
                detail.setPrice(product.getImportPrice());
                detail.setPriceSnapshot(product.getImportPrice());
                detail.setProductCode(product.getProductCode());
                detail.setProductName(product.getName());
            });

            detail.setQuantity(d.getQuantity());
            detail.setImportReceipt(oldReceipt);
            return detail;
        }).collect(Collectors.toList());
        oldReceipt.setDetails(newDetails);

        ImportReceipt updated = importReceiptRepository.save(oldReceipt);

        // üîπ C·∫≠p nh·∫≠t t·ªìn kho theo chi ti·∫øt m·ªõi (C·ªòNG l·∫°i s·ªë l∆∞·ª£ng nh·∫≠p m·ªõi)
        for (ImportReceiptDetail detail : updated.getDetails()) {
            Product product = detail.getProduct();
            if (product != null) {
                int newQuantity = product.getStock() + detail.getQuantity();
                product.setStock(newQuantity);
                productRepository.save(product);
            }
        }

        return Optional.of(ImportReceiptResponseDTO.fromEntity(updated));
    }

    // ===================== X√ìA M·ªÄM =====================
    @Transactional
    public boolean softDeleteImportReceipt(String id, User currentUser) {
        Optional<ImportReceipt> importReceiptOpt = importReceiptRepository.findByIdAndDeletedAtIsNull(id);
        if (importReceiptOpt.isEmpty()) {
            return false;
        }
        ImportReceipt importReceipt = importReceiptOpt.get();

        // Ki·ªÉm tra quy·ªÅn x√≥a theo role
        String role = currentUser.getRole(); // gi·∫£ s·ª≠ User c√≥ field role
        LocalDateTime createdAt = importReceipt.getCreatedAt();
        LocalDateTime now = LocalDateTime.now();

        boolean canDelete = false;

        if ("admin".equals(role)) {
            canDelete = true; // admin x√≥a b·∫•t c·ª© l√∫c n√†o
        } else if ("manager".equals(role)) {
            canDelete = createdAt.plusDays(7).isAfter(now); // manager trong 7 ng√†y
        } else if ("staff".equals(role)) {
            canDelete = createdAt.plusDays(1).isAfter(now); // staff trong 1 ng√†y
        }

        if (!canDelete) {
            return false; // kh√¥ng ƒë·ªß quy·ªÅn ho·∫∑c h·∫øt h·∫°n x√≥a
        }

        // üîπ Rollback t·ªìn kho khi x√≥a (TR·ª™ ƒëi s·ªë l∆∞·ª£ng ƒë√£ nh·∫≠p t·ª´ phi·∫øu n√†y)
        if (importReceipt.getDetails() != null) {
            for (ImportReceiptDetail detail : importReceipt.getDetails()) {
                Product product = detail.getProduct();
                if (product != null) {
                    int rollbackQuantity = product.getStock() - detail.getQuantity();
                    product.setStock(Math.max(rollbackQuantity, 0)); // tr√°nh √¢m
                    productRepository.save(product);
                }
            }
        }

        // üîπ ƒê√°nh d·∫•u ƒë√£ x√≥a m·ªÅm
        importReceipt.setDeletedAt(LocalDateTime.now());
        importReceiptRepository.save(importReceipt);

        return true;
    }

}
